const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const bodyParser = require('body-parser');
const multer = require('multer');
const path = require('path');
const app = express();
const port = 3000;
const cloudinary = require('cloudinary').v2;
const { CloudinaryStorage } = require('multer-storage-cloudinary');


// Middleware
app.use(cors());
app.use(bodyParser.json());

// MySQL connection
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'root',
    database: 'gigateam'
});

const promisedb = db.promise();

db.connect(err => {
    if (err) {
        console.error('Error connecting to MySQL:', err);
        return;
    }
    console.log('Connected to MySQL');
});


// Configure Cloudinary with your credentials
cloudinary.config({
  cloud_name: 'dtl8iygo0',
  api_key: '135698412873236',
  api_secret: 'QlzxDGV3Dr1s8ODD4izK9ePRoa8'
});

// Configure Cloudinary storage
const storage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: 'products', // Folder name in your Cloudinary account
    format: async (req, file) => 'jpeg', // You can dynamically set format
    public_id: (req, file) => file.originalname.split('.')[0] // File name in Cloudinary
  }
});

const upload = multer({ storage: storage });

// Serve static files from the 'public' directory
app.use('/public', express.static(path.join(__dirname, '../public')));

app.post('/api/upload', upload.single('file'), (req, res) => {
  // Cloudinary returns the file URL in req.file.path
  res.json({ imageUrl: req.file.path });
});


//authorization
app.post('/api/auth/login', (req, res) => {
    const { username, password } = req.body;
    
    
    // SQL query to find the user in the 'admin' table
    const query = 'SELECT * FROM admin WHERE name = ? AND password = ?';
    
    db.query(query, [username, password], (err, results) => {
      if (err) {
        console.error('Error executing query:', err);
        return res.status(500).json({ message: 'Server error' });
      }
      
      if (results.length > 0) {
        // If user is found and credentials match
        res.status(200).json({ message: 'Login successful', token: 'jwt-token' }); // Replace 'jwt-token' with an actual token if using JWT
      } else {
        // If credentials don't match
        res.status(401).json({ message: 'Invalid username or password' });
        console.log('error invalid username;')
      }
    });
  });
  
// Endpoint to get all products
app.get('/api/products', async (req, res) => {
  try {
    const [rows] = await promisedb.query('SELECT * FROM products');
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});


// Endpoint to add a new product
app.post('/api/products', async (req, res) => {
  try {
    const { id, name, imageUrl, price, oldprice, category, onoffer, bestselling, description } = req.body;

    // Insert product into the database
    const [result] = await promisedb.query(
      'INSERT INTO products (id, name, image, price, oldprice, category, onoffer, bestselling, description) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
      [id, name, imageUrl, price, oldprice, category, onoffer, bestselling, description]
    );

    res.json({
      id: result.insertId, // This will be generated by MySQL if you don't provide an ID
      name,
      imageUrl,
      price,
      oldprice,
      category,
      onoffer,
      bestselling
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to add product' });
  }
});

//Endpoint to update data
app.put('/api/products/:id', async (req, res) => {
  const { id } = req.params;
  const updatedProductData = req.body;

  try {
    // Fetch the current product data
    const [rows] = await promisedb.query('SELECT * FROM products WHERE id = ?', [id]);
    if (rows.length === 0) {
      return res.status(404).json({ message: 'Product not found' });
    }
    
    const product = rows[0];
    const oldPrice = product.price;
    const isOnOffer = updatedProductData.price < oldPrice * 0.95;

    // Update the product data
    await promisedb.query(
      'UPDATE products SET name = ?, price = ?, onOffer = ?, bestselling = ?, description = ?, oldPrice = ? WHERE id = ?',
      [updatedProductData.name || product.name, updatedProductData.price, isOnOffer, updatedProductData.bestselling, updatedProductData.description, oldPrice, id]
    );

    // Fetch the updated product
    const [updatedRows] = await promisedb.query('SELECT * FROM products WHERE id = ?', [id]);

    res.status(200).json(updatedRows[0]);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});


//Delete a product 
app.delete('/api/products/:id', (req, res) => {
  const productId = req.params.id;

  const deleteQuery = 'DELETE FROM products WHERE id = ?';

  db.query(deleteQuery, [productId], (err, result) => {
      if (err) {
          console.error('Error deleting product:', err);
          res.status(500).send('Error deleting product');
      } else if (result.affectedRows === 0) {
          // No product found with the given ID
          res.status(404).send('Product not found');
      } else {
          console.log(`Product with ID ${productId} deleted successfully.`);
          res.status(200).json({ message: `Product with ID ${productId} deleted successfully.` });
      }
  });
});

// Start server
app.listen(port, '0.0.0.0', () => {
    console.log(`Server running on http://localhost:${port}`);
});
